const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const session = require('express-session'); // Adicionado para controle de sessão
const app = express();
const http = require('http').createServer(app);
const io = require('socket.io')(http);
const { startBot, stopBot, getBotStatus } = require('./index');

let logs = [];

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// Sessão para controle de login
app.use(session({
  secret: 'sua_chave_secreta_segura',
  resave: false,
  saveUninitialized: true
}));

// Engine e views
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'html');

// Middleware de autenticação
function checkAuth(req, res, next) {
  if (req.session.authenticated) return next();
  res.redirect('/');
}

// Rota login
app.get('/', (req, res) => {
  if (req.session.authenticated) return res.redirect('/index');
  res.sendFile(path.join(__dirname, 'views/login.html'));
});

// Validação da senha
app.post('/login', (req, res) => {
  const { senha } = req.body;
  if (senha === '6445') {
    req.session.authenticated = true;
    res.redirect('/index');
  } else {
    res.send('Senha incorreta!');
  }
});

// Logout
app.get('/logout', (req, res) => {
  req.session.destroy(() => {
    res.redirect('/');
  });
});

// Painel principal
app.get('/index', checkAuth, (req, res) => {
  res.sendFile(path.join(__dirname, 'views/index.html'));
});

// Dashboard (opcional)
app.get('/dashboard', checkAuth, (req, res) => {
  res.sendFile(path.join(__dirname, 'views/dashboard.html'));
});

// Controle do bot
app.get('/start', checkAuth, (req, res) => {
  startBot(io);
  res.send('Bot iniciado.');
});

app.get('/stop', checkAuth, (req, res) => {
  stopBot();
  res.send('Bot desligado.');
});

app.get('/status', checkAuth, (req, res) => {
  res.json({ status: getBotStatus() });
});

// WebSocket para logs
io.on('connection', (socket) => {
  logs.forEach(l => socket.emit('log', l));
});

// Função para registrar logs
function addLog(msg) {
  logs.push(msg);
  io.emit('log', msg);
}

function startBot(io) {
  // lógica para iniciar o bot
}

function stopBot() {
  // lógica para parar o bot
}

function getBotStatus() {
  // lógica para retornar o status
}

// Exporta corretamente
module.exports = {
  startBot,
  stopBot,
  getBotStatus
};


// Exporta servidor e função de log
module.exports = { http, addLog };

// Inicia o servidor
if (require.main === module) {
  const PORT = process.env.PORT || 3000;
  http.listen(PORT, () => console.log(`Painel rodando em http://localhost:${PORT}`));
}
